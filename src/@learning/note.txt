Tipe Data
=> 
--String -> " Hallo Friend"

//Number
--Integer -> 1234
--float -> 123,5

Array => ["cat","dog",123]
object => {
    nama : "blackcat",
    jenis : "garong"
}

array of object -> [
    {
        nama : "blackcat",
        jenis : "garong"
    },
    {
        nama : "blackcat",
        jenis : "garong"
    },
    dst..
]

DEKLARASI =>
Let, Const, Var ??

LET => TIDAK BISA DI DEKLARASI ULANG
-- Let name = "Hello World"
-- let name = "helo"
-- console.log(name) 
result 
   The symbol "name" has already been declared
   
CONST => TIDAK BISA DI DEKLARASI ULANG, tidak bisa di inisialisasi ulang
-- Let name = "Hello World"
-- name = "helo"
-- console.log(name) 
result 
   The symbol "name" has already been declared

   Cannot assign to "name" because it is a constant

VAR => BISA DI DEKLARASI ULANG
-- var name = "Hello World"
-- var name = "hello, "
-- console.log(name)
result
hello

// const data = {
//     nama: inputName,
//     email: inputEmail,
//     phone: inputPhone,
//     subject: inputSubject,
//     message: inputMessage
// }

// console.log([data, data, data])

// 1 == "1" -> true
// 1 === "1" -> false

// CONDITION (IF ELSE | SWITCH CASE) |  CHALLENGE : bikin rentang dari nilai
// const nilai = 75
// if (nilai > 80) {
//     console.log("Nilai B")
// } else if (nilai < 20) {
//     console.log("Nilai Z")
// } else if (nilai < 50) {
//     console.log("Nilai X")
// } else {
//     console.log("Nilai tidak ada")
// }

// LOOPING : FOR, WHILE, DO-WHILE
// FOR -> perulangan yang kamu sudah tau kapan harus berhenti
// for(let index = 0; index < 10; index++) { 
//     console.log("ini adalah index", index)
// }

// WHILE -> perulangan yang belum tentu kamu tau kapan harus berhenti (berdasarkan data dinamis)

// DO WHILE -> perulangan yang jalan dulu sekali, baru dicek

// Math :
// floor -> dibulatkan ke bawah, ex : 8.6 -> 8
// round -> dibulatkan angka terdekat, ex : 8.3 -> 8
// ceil -> dibulatkan ke atas, ex : 8.3 -> 9

ORM = Object Relation Mapping. Mempermudah melakukan query ke database, Mempermudah melakukan konfigurasi, lebih aman, query yg dijalankan akan dibungkus dengan sebuah method
DDL, => Database Definition Language. Create Database ? Drop Database ? Create Table ? Alter Table
DML, => Database Manipulation Language. SELECT, INSERT, UPDATE, DELETE dst.
